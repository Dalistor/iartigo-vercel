import { GoogleGenerativeAI } from '@google/generative-ai'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '')

// Configura√ß√µes otimizadas para diferentes tipos de tarefa
const GENERATION_CONFIG = {
  article: {
    temperature: 0.7,
    topP: 0.8,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  },
  section: {
    temperature: 0.6,
    topP: 0.8,
    topK: 35,
    maxOutputTokens: 4096,
    responseMimeType: "text/plain",
  },
  analysis: {
    temperature: 0.3,
    topP: 0.9,
    topK: 20,
    maxOutputTokens: 1024,
    responseMimeType: "text/plain",
  },
  literature: {
    temperature: 0.4,
    topP: 0.9,
    topK: 30,
    maxOutputTokens: 2048,
    responseMimeType: "text/plain",
  }
}

interface ArticleGenerationParams {
  title: string
  abstract?: string
  keywords?: string
  fieldOfStudy?: string
  methodology?: string
  targetJournal?: string
  authors?: Array<{
    name: string
    institution: string
  }>
  literatureSuggestions?: Array<{
    title: string
    authors: string
    journal: string
    year: number
    abstract: string
  }>
  attachedFiles?: Array<{
    name: string
    type: 'thesis' | 'data' | 'image'
    size: string
    fileName: string
    content?: string
    imageUrl?: string // URL da imagem salva
    description?: string // Descri√ß√£o da imagem para a IA
  }>
  includeCharts?: boolean
  chartIds?: string[] // IDs espec√≠ficos dos gr√°ficos a serem usados
  attachedCharts?: Array<{
    id: string
    name: string
    type: 'bar' | 'line' | 'pie' | 'scatter'
    data: any
    description: string
    referenceId: string
  }>
  includeTables?: boolean
}

// Cache simples para an√°lises de imagem
const imageAnalysisCache = new Map<string, string>()

export class GeminiService {
  // Sistema de retry para chamadas da API
  private static async withRetry<T>(
    operation: () => Promise<T>, 
    maxRetries: number = 3,
    delay: number = 1000
  ): Promise<T> {
    let lastError: Error | null = null
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
      try {
        return await operation()
      } catch (error) {
        lastError = error as Error
        console.log(`Tentativa ${attempt + 1} falhou:`, error)
        
        // Backoff exponencial
        if (attempt < maxRetries - 1) {
          await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, attempt)))
        }
      }
    }
    
    throw lastError
  }

  // Cache para an√°lise de imagens (evitar reprocessamento)
  static getCachedImageAnalysis(imageHash: string): string | null {
    return imageAnalysisCache.get(imageHash) || null
  }

  static setCachedImageAnalysis(imageHash: string, analysis: string): void {
    // Limitar cache a 50 entradas
    if (imageAnalysisCache.size >= 50) {
      const firstKey = imageAnalysisCache.keys().next().value
      if (firstKey) {
        imageAnalysisCache.delete(firstKey)
      }
    }
    imageAnalysisCache.set(imageHash, analysis)
  }

  static async generateArticle(params: ArticleGenerationParams): Promise<string> {
    const startTime = Date.now()
    console.log('üöÄ Iniciando gera√ß√£o de artigo com Gemini 2.0 Flash Experimental')
    
    const result = await this.withRetry(async () => {
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: GENERATION_CONFIG.article
      })
      
      const prompt = this.buildArticlePrompt(params)
      
      const result = await model.generateContent(prompt)
      const response = await result.response
      let text = response.text()
      
      // Limpar blocos de c√≥digo markdown se presentes
      text = this.cleanMarkdownCodeBlocks(text)
      
      return text
    }, 3, 2000)
    
    const duration = Date.now() - startTime
    console.log(`‚úÖ Artigo gerado em ${duration}ms (${Math.round(duration/1000)}s)`)
    
    return result
  }

  static async generateSection(
    sectionType: string,
    context: string,
    additionalInfo?: string
  ): Promise<string> {
    const startTime = Date.now()
    console.log(`üîß Gerando se√ß√£o: ${sectionType}`)
    
    const result = await this.withRetry(async () => {
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: GENERATION_CONFIG.section
      })
      
      const prompt = this.buildSectionPrompt(sectionType, context, additionalInfo)
      
      const result = await model.generateContent(prompt)
      const response = await result.response
      let text = response.text()
      
      // Limpar blocos de c√≥digo markdown se presentes
      text = this.cleanMarkdownCodeBlocks(text)
      
      return text
    }, 3, 1500)
    
    const duration = Date.now() - startTime
    console.log(`‚úÖ Se√ß√£o '${sectionType}' gerada em ${duration}ms`)
    
    return result
  }

  /**
   * Analisa dados fornecidos pelo usu√°rio e gera informa√ß√µes para gr√°ficos
   */
  static async analyzeDataForCharts(
    dataContent: string,
    context: string = "",
    fileName: string = ""
  ): Promise<{
    success: boolean
    charts: Array<{
      id: string
      name: string
      type: 'bar' | 'line' | 'pie' | 'scatter'
      data: any
      description: string
      analysisContext: string
    }>
    error?: string
  }> {
    console.log('üìä Iniciando an√°lise de dados para gera√ß√£o de gr√°ficos...')
    console.log(`üìÑ Arquivo: ${fileName}`)
    console.log(`üìù Contexto: ${context}`)
    console.log(`üìã Tamanho dos dados: ${dataContent.length} caracteres`)

    try {
      const result = await this.withRetry(async () => {
        const model = genAI.getGenerativeModel({ 
          model: 'gemini-2.0-flash-exp',
          generationConfig: {
            temperature: 0.3,
            topP: 0.8,
            topK: 20,
            maxOutputTokens: 2048,
            responseMimeType: "application/json",
          }
        })

        const analysisPrompt = `
Voc√™ √© um especialista em an√°lise de dados e visualiza√ß√£o cient√≠fica. Analise CRITERIOSAMENTE os dados fornecidos e identifique apenas os gr√°ficos que fazem SENTIDO CIENT√çFICO.

DADOS FORNECIDOS:
\`\`\`
${dataContent.substring(0, 3000)}${dataContent.length > 3000 ? '\n...(dados truncados)' : ''}
\`\`\`

ARQUIVO: ${fileName}
CONTEXTO: ${context || 'Artigo cient√≠fico'}

CRIT√âRIOS PARA AN√ÅLISE:
1. üîç Identifique dados num√©ricos ou categ√≥ricos nos arquivos fornecidos
2. üìä Sugira gr√°ficos apenas se houver dados estruturados suficientes
3. üéØ Quantidade flex√≠vel: 1-3 gr√°ficos conforme valor agregado aos dados
4. ‚úÖ Use dados que est√£o claramente presentes no arquivo
5. üß≠ Priorize qualidade sobre quantidade - melhor poucos gr√°ficos relevantes

QUANDO SUGERIR CADA TIPO:
- "bar": Comparar categorias/grupos (ex: experimental vs controle, por faixa et√°ria)
- "line": Tend√™ncias temporais ou sequenciais (ex: evolu√ß√£o ao longo do tempo)
- "pie": Distribui√ß√µes percentuais (ex: propor√ß√£o por categoria, at√© 6 fatias)
- "scatter": Correla√ß√µes entre duas vari√°veis cont√≠nuas (ex: idade vs pontua√ß√£o)

FORMATO DE RESPOSTA (JSON v√°lido):
{
  "charts": [
    {
      "id": "id_descritivo_especifico",
      "name": "T√≠tulo Espec√≠fico e Cient√≠fico",
      "type": "bar|line|pie|scatter",
      "data": {
        "labels": ["categoria_espec√≠fica_1", "categoria_espec√≠fica_2"],
        "values": [valor_real_1, valor_real_2],
        "unit": "unidade_medida" // ex: "anos", "kg", "%", "pessoas"
      },
      "description": "O que EXATAMENTE este gr√°fico mostra e por que √© relevante",
      "analysisContext": "Insight cient√≠fico espec√≠fico extra√≠do destes dados"
    }
  ]
}

REGRAS IMPORTANTES:
‚ùå N√ÉO invente dados que n√£o existem no arquivo
‚ùå N√ÉO use labels extremamente gen√©ricos como "Item 1", "Categoria A"
‚ùå N√ÉO force quantidade espec√≠fica - prefira qualidade
‚úÖ EXTRAIA dados reais do conte√∫do fornecido
‚úÖ USE nomes descritivos baseados no contexto
‚úÖ INCLUA unidades quando identific√°veis
‚úÖ SEJA espec√≠fico mas realista
‚úÖ GERE apenas gr√°ficos que realmente agregam valor

FLEXIBILIDADE PERMITIDA:
- Pode agrupar dados similares para formar categorias
- Pode calcular m√©dias, totais ou propor√ß√µes dos dados
- Pode interpretar dados de diferentes formatos (CSV, JSON, texto)
- Pode usar sin√¥nimos ou termos relacionados para labels

EXEMPLO DE DADOS V√ÅLIDOS:
{"labels": ["Grupo Controle", "Grupo Experimental"], "values": [23.5, 31.2], "unit": "m√©dia (pontos)"}

SE OS DADOS N√ÉO SUPORTAREM GR√ÅFICOS V√ÅLIDOS, retorne: {"charts": []}
        `

        const result = await model.generateContent(analysisPrompt)
        const response = await result.response
        const text = response.text().trim()

        // Tentar extrair JSON da resposta
        let jsonData
        try {
          // Procurar por JSON v√°lido na resposta
          const jsonMatch = text.match(/\{[\s\S]*\}/)
          if (jsonMatch) {
            jsonData = JSON.parse(jsonMatch[0])
          } else {
            jsonData = JSON.parse(text)
          }
        } catch (parseError) {
          console.error('‚ùå Erro ao fazer parse do JSON:', parseError)
          console.log('üìÑ Resposta da IA:', text)
          throw new Error('Resposta da IA n√£o √© um JSON v√°lido')
        }

        // Validar estrutura
        if (!jsonData.charts || !Array.isArray(jsonData.charts)) {
          throw new Error('Estrutura de resposta inv√°lida - charts n√£o encontrado')
        }

        // Validar cada gr√°fico com crit√©rios rigorosos
        const validCharts = jsonData.charts.filter((chart: any) => {
          // Valida√ß√£o b√°sica de estrutura
          if (!chart.id || !chart.name || !chart.type || !chart.data || !chart.description) {
            console.warn('‚ö†Ô∏è Gr√°fico rejeitado: estrutura incompleta:', chart)
            return false
          }

          // Valida√ß√£o de tipos permitidos
          const allowedTypes = ['bar', 'line', 'pie', 'scatter']
          if (!allowedTypes.includes(chart.type)) {
            console.warn('‚ö†Ô∏è Gr√°fico rejeitado: tipo inv√°lido:', chart.type)
            return false
          }

          // Valida√ß√£o espec√≠fica por tipo (mais flex√≠vel)
          if (chart.type === 'bar' || chart.type === 'line') {
            if (!chart.data.labels || !chart.data.values || 
                !Array.isArray(chart.data.labels) || !Array.isArray(chart.data.values) ||
                chart.data.labels.length < 2 || chart.data.values.length < 2) {
              console.warn('‚ö†Ô∏è Gr√°fico bar/line rejeitado: dados insuficientes:', chart)
              return false
            }
            // Permitir pequenas discrep√¢ncias no tamanho dos arrays
            if (Math.abs(chart.data.labels.length - chart.data.values.length) > 1) {
              console.warn('‚ö†Ô∏è Gr√°fico bar/line rejeitado: arrays inconsistentes:', chart)
              return false
            }
          }

          if (chart.type === 'pie') {
            if (!chart.data.labels || !chart.data.values || 
                !Array.isArray(chart.data.labels) || !Array.isArray(chart.data.values) ||
                chart.data.labels.length < 2 || chart.data.values.length < 2 ||
                chart.data.labels.length > 8) { // M√°ximo 8 fatias
              console.warn('‚ö†Ô∏è Gr√°fico pie rejeitado: dados inadequados:', chart)
              return false
            }
          }

          // Validar que valores s√£o num√©ricos
          if (chart.data.values && Array.isArray(chart.data.values)) {
            const hasValidNumbers = chart.data.values.every((val: any) => 
              typeof val === 'number' && !isNaN(val) && isFinite(val)
            )
            if (!hasValidNumbers) {
              console.warn('‚ö†Ô∏è Gr√°fico rejeitado: valores n√£o num√©ricos v√°lidos:', chart)
              return false
            }
          }

          // Validar que n√£o tem labels extremamente gen√©ricos (mais flex√≠vel)
          if (chart.data.labels && Array.isArray(chart.data.labels)) {
            const veryGenericLabels = chart.data.labels.filter((label: string) => 
              /^(item|categoria|elemento|grupo)\s*[0-9]+$/i.test(label?.toString() || '') ||
              /^(a|b|c|d|e|f)$/i.test(label?.toString() || '')
            )
            // Rejeitar apenas se TODOS os labels forem gen√©ricos
            if (veryGenericLabels.length === chart.data.labels.length && chart.data.labels.length > 1) {
              console.warn('‚ö†Ô∏è Gr√°fico rejeitado: todos os labels s√£o extremamente gen√©ricos:', chart)
              return false
            }
          }

          // Validar que nome n√£o √© extremamente gen√©rico (mais flex√≠vel para IDs aleat√≥rios)
          if (/^(gr√°fico|chart|an√°lise|dados?)\s*(de\s*)?dados?$/i.test(chart.name) ||
              /^(gr√°fico|chart)\s*[0-9]+$/i.test(chart.name)) {
            console.warn('‚ö†Ô∏è Gr√°fico rejeitado: nome muito gen√©rico:', chart.name)
            return false
          }

          console.log('‚úÖ Gr√°fico validado:', chart.id)
          return true
        })

        if (validCharts.length === 0) {
          throw new Error('Nenhum gr√°fico v√°lido foi gerado pela an√°lise')
        }

        // Aplicar valida√ß√£o de relev√¢ncia (mais flex√≠vel)
        const contextuallyValidCharts = validCharts.filter((chart: any) => {
          const relevanceCheck = this.validateChartRelevance(chart, dataContent, context)
          if (!relevanceCheck.isValid) {
            console.warn(`‚ÑπÔ∏è Gr√°fico com baixa relev√¢ncia mantido: ${chart.id} - ${relevanceCheck.reason}`)
            // Manter gr√°fico mesmo com baixa relev√¢ncia, apenas logar o aviso
          }
          return true // Aceitar todos os gr√°ficos que passaram na valida√ß√£o estrutural
        })

        if (contextuallyValidCharts.length === 0) {
          console.warn('‚ö†Ô∏è Todos os gr√°ficos foram rejeitados por falta de relev√¢ncia')
          return { charts: [] }
        }

        console.log(`‚úÖ An√°lise conclu√≠da: ${contextuallyValidCharts.length} gr√°ficos v√°lidos e relevantes`)
        return { charts: contextuallyValidCharts }

      }, 2, 2000)

      return {
        success: true,
        charts: result.charts
      }

    } catch (error) {
      console.error('‚ùå Erro na an√°lise de dados:', error)
      return {
        success: false,
        charts: [],
        error: error instanceof Error ? error.message : 'Erro desconhecido na an√°lise de dados'
      }
    }
  }

  /**
   * Gera SVG baseado na an√°lise de dados da IA
   */
  static async generateDataDrivenSVG(
    chart: {
      id: string
      name: string
      type: 'bar' | 'line' | 'pie' | 'scatter'
      data: any
      description: string
      analysisContext: string
    },
    width: number = 1200,
    height: number = 800
  ): Promise<{
    success: boolean
    svgContent?: string
    error?: string
  }> {
    console.log(`üé® Gerando SVG baseado em dados para: ${chart.id}`)

    try {
      const result = await this.withRetry(async () => {
        const model = genAI.getGenerativeModel({ 
          model: 'gemini-2.0-flash-exp',
          generationConfig: {
            temperature: 0.1,
            topP: 0.8,
            topK: 10,
            maxOutputTokens: 3000,
            responseMimeType: "text/plain",
          }
        })

        const svgPrompt = `
Voc√™ √© um especialista em SVG e visualiza√ß√£o cient√≠fica. Gere um gr√°fico SVG PROFISSIONAL e PRECISO baseado EXCLUSIVAMENTE nos dados analisados.

INFORMA√á√ïES DO GR√ÅFICO:
- ID: ${chart.id}
- Nome: ${chart.name}
- Tipo: ${chart.type}
- Descri√ß√£o: ${chart.description}
- Contexto: ${chart.analysisContext}

DADOS REAIS PARA PLOTAR:
${JSON.stringify(chart.data, null, 2)}

ESPECIFICA√á√ïES T√âCNICAS OBRIGAT√ìRIAS:
- Dimens√µes: ${width}x${height} pixels
- Fundo: Branco (#FFFFFF)
- Paleta: Azul cient√≠fico (#2563EB), Verde (#059669), Vermelho (#DC2626), Laranja (#F59E0B), Roxo (#7C3AED)
- Fonte: "Arial", sans-serif
- Margens: 80px topo/lateral, 100px inferior para labels

INSTRU√á√ïES CR√çTICAS POR TIPO:

üìä GR√ÅFICO DE BARRAS (bar):
- Barras verticais, largura proporcional ao espa√ßo dispon√≠vel
- Altura das barras EXATAMENTE proporcional aos valores
- Eixo Y com escala precisa (0 at√© valor m√°ximo + 10%)
- Labels do eixo X rotacionados se necess√°rio
- Valores num√©ricos no topo de cada barra
- Grid horizontal sutil para refer√™ncia

üìà GR√ÅFICO DE LINHA (line):
- Linha cont√≠nua conectando pontos na sequ√™ncia exata
- Pontos circulares marcados (raio 4px)
- Eixos X e Y com escalas proporcionais aos dados
- Grid discreto para melhor leitura
- Valores nos pontos quando espa√ßo permitir

ü•ß GR√ÅFICO DE PIZZA (pie):
- Fatias EXATAMENTE proporcionais aos valores percentuais
- In√≠cio √†s 12h (topo), sentido hor√°rio
- Labels externos com linhas conectoras
- Percentuais dentro das fatias (se >5%) ou na legenda
- Cores alternadas da paleta

üî∑ GR√ÅFICO DE DISPERS√ÉO (scatter):
- Pontos plotados nas coordenadas X,Y exatas
- Eixos com escalas apropriadas aos dados
- Grid para facilitar leitura
- Pontos destacados (raio 5px, borda mais escura)

ELEMENTOS OBRIGAT√ìRIOS EM TODO SVG:
1. üìù T√≠tulo centralizado (font-size: 20px, font-weight: bold)
2. üìè Eixos com labels descritivos e unidades
3. üìä Escala num√©rica precisa e proporcional
4. üé® Cores consistentes da paleta definida
5. üìê Grid de refer√™ncia sutil (#F3F4F6)
6. üè∑Ô∏è Legenda quando necess√°rio

VALIDA√á√ÉO FINAL OBRIGAT√ìRIA:
- Todos os valores dos dados est√£o representados?
- As propor√ß√µes est√£o matematicamente corretas?
- Os labels s√£o leg√≠veis e n√£o se sobrep√µem?
- O t√≠tulo descreve exatamente o que √© mostrado?

FORMATO DE RESPOSTA:
Retorne APENAS o c√≥digo SVG v√°lido e completo.
Inicie com <svg e termine com </svg>
N√ÉO adicione coment√°rios, explica√ß√µes ou markdown.

üö´ PROIBI√á√ïES CR√çTICAS:
- NUNCA use elementos <script> ou JavaScript
- NUNCA use loops (for, while) ou fun√ß√µes
- NUNCA use document.write ou m√©todos DOM
- Gere TODOS os elementos SVG estaticamente
- Use apenas tags SVG v√°lidas: <rect>, <circle>, <line>, <path>, <text>, <g>

TEMPLATE ESTRUTURAL RESPONSIVO:
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#FFFFFF"/>
  <defs>
    <style>
      .title { font: bold 20px Arial, sans-serif; fill: #1F2937; }
      .axis-label { font: 14px Arial, sans-serif; fill: #374151; }
      .data-label { font: 12px Arial, sans-serif; fill: #6B7280; }
      .grid-line { stroke: #F3F4F6; stroke-width: 1; }
    </style>
  </defs>
  
  <text x="${width/2}" y="35" text-anchor="middle" class="title">${chart.name}</text>
  
  <!-- GERE TODOS OS ELEMENTOS DIRETAMENTE - N√ÉO USE JAVASCRIPT -->
  <!-- Para m√∫ltiplos elementos similares, repita as tags manualmente -->
  <!-- Exemplo de barras: <rect x="10" y="20" width="30" height="40" fill="#2563EB"/> -->
  <!-- Exemplo de texto: <text x="25" y="15" text-anchor="middle" class="data-label">Valor</text> -->
  
</svg>

‚ö†Ô∏è OBRIGAT√ìRIO: 
1. SEMPRE incluir viewBox="0 0 ${width} ${height}" para responsividade
2. Verifique que TODOS os valores dos dados est√£o plotados corretamente
3. Use APENAS elementos SVG est√°ticos - N√ÉO use JavaScript
4. Repita manualmente elementos similares ao inv√©s de usar loops
5. O SVG deve ser responsivo e escalar proporcionalmente
        `

        const result = await model.generateContent(svgPrompt)
        const response = await result.response
        let svgContent = response.text().trim()

        // Limpar poss√≠veis markdown ou prefixos
        if (svgContent.includes('```')) {
          const svgMatch = svgContent.match(/```(?:svg)?\s*\n?([\s\S]*?)\n?```/)
          if (svgMatch) {
            svgContent = svgMatch[1].trim()
          }
        }

        // Verificar se √© SVG v√°lido e bem formado
        if (!svgContent.startsWith('<svg') || !svgContent.endsWith('</svg>')) {
          throw new Error('SVG gerado n√£o √© v√°lido: deve come√ßar com <svg e terminar com </svg>')
        }

        // Valida√ß√µes adicionais de qualidade do SVG
        const svgValidations = [
          { test: () => svgContent.includes('width='), error: 'SVG deve ter atributo width' },
          { test: () => svgContent.includes('height='), error: 'SVG deve ter atributo height' },
          { test: () => svgContent.includes('viewBox='), error: 'SVG deve ter atributo viewBox para responsividade' },
          { test: () => svgContent.includes('xmlns='), error: 'SVG deve ter namespace xmlns' },
          { test: () => svgContent.includes('<text'), error: 'SVG deve conter elementos de texto' },
          { test: () => !svgContent.includes('<Chart'), error: 'SVG cont√©m tag inv√°lida <Chart>' },
          { test: () => !svgContent.includes('[CHART'), error: 'SVG cont√©m tag de placeholder [CHART]' },
          { test: () => !svgContent.includes('<script'), error: 'SVG n√£o deve conter elementos <script>' },
          { test: () => !svgContent.includes('document.'), error: 'SVG n√£o deve conter c√≥digo JavaScript' },
          { test: () => !svgContent.includes('for ('), error: 'SVG n√£o deve conter loops JavaScript' },
          { test: () => !svgContent.includes('function'), error: 'SVG n√£o deve conter fun√ß√µes JavaScript' }
        ]

        for (const validation of svgValidations) {
          if (!validation.test()) {
            // Se viewBox est√° faltando, tentar adicionar automaticamente
            if (validation.error.includes('viewBox')) {
              console.warn('‚ö†Ô∏è ViewBox ausente, adicionando automaticamente...')
              const widthMatch = svgContent.match(/width="(\d+)"/)
              const heightMatch = svgContent.match(/height="(\d+)"/)
              
              if (widthMatch && heightMatch) {
                const w = widthMatch[1]
                const h = heightMatch[1]
                svgContent = svgContent.replace(
                  '<svg',
                  `<svg viewBox="0 0 ${w} ${h}"`
                )
                continue // Pular erro se conseguiu corrigir
              }
            }
            throw new Error(`SVG inv√°lido: ${validation.error}`)
          }
        }

        // Verificar balanceamento b√°sico de tags principais
        const mainTags = ['<svg', '<rect', '<text', '<circle', '<line', '<path', '<g']
        for (const tag of mainTags) {
          const openCount = (svgContent.match(new RegExp(tag, 'g')) || []).length
          const closeTag = tag.replace('<', '</')
          const closeCount = (svgContent.match(new RegExp(closeTag, 'g')) || []).length
          
          // Para tags auto-fechantes, permitir diferen√ßa
          if (tag !== '<rect' && tag !== '<circle' && tag !== '<line' && openCount !== closeCount && openCount > 0) {
            console.warn(`‚ö†Ô∏è Poss√≠vel desbalanceamento em ${tag}: ${openCount} aberto(s), ${closeCount} fechado(s)`)
          }
        }

        // Verificar se o t√≠tulo do gr√°fico est√° presente no SVG
        if (!svgContent.includes(chart.name.substring(0, 20))) {
          console.warn('‚ö†Ô∏è Aviso: T√≠tulo do gr√°fico pode n√£o estar presente no SVG')
        }

        console.log(`‚úÖ SVG gerado para ${chart.id}: ${svgContent.length} caracteres`)
        return { svgContent }

      }, 2, 1500)

      return {
        success: true,
        svgContent: result.svgContent
      }

    } catch (error) {
      console.error(`‚ùå Erro na gera√ß√£o de SVG para ${chart.id}:`, error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido na gera√ß√£o de SVG'
      }
    }
  }

  /**
   * Valida se um gr√°fico faz sentido cient√≠fico baseado nos dados originais
   */
  static validateChartRelevance(
    chart: any,
    originalData: string,
    context: string
  ): { isValid: boolean; reason?: string } {
    try {
      // Verificar se os dados do gr√°fico t√™m correspond√™ncia no texto original
      const chartLabels = chart.data.labels || []
      const chartValues = chart.data.values || []

      // Validar se pelo menos 70% dos labels aparecem no texto original
      const labelsInText = chartLabels.filter((label: string) => 
        originalData.toLowerCase().includes(label.toLowerCase())
      )
      
      if (labelsInText.length < chartLabels.length * 0.7) {
        return { 
          isValid: false, 
          reason: `Labels do gr√°fico n√£o encontrados nos dados originais: ${chartLabels.join(', ')}` 
        }
      }

      // Verificar se os valores s√£o realistas (n√£o muito round numbers)
      const hasOnlyRoundNumbers = chartValues.every((val: number) => val % 10 === 0)
      if (hasOnlyRoundNumbers && chartValues.length > 2) {
        return { 
          isValid: false, 
          reason: 'Valores suspeitos: todos s√£o n√∫meros redondos (poss√≠vel inven√ß√£o)' 
        }
      }

      // Verificar se o contexto do gr√°fico est√° relacionado ao tema
      const contextWords = context.toLowerCase().split(/\s+/)
      const chartDescription = (chart.description || '').toLowerCase()
      const hasContextRelevance = contextWords.some(word => 
        word.length > 3 && chartDescription.includes(word)
      )

      if (!hasContextRelevance && context.length > 10) {
        return { 
          isValid: false, 
          reason: 'Gr√°fico n√£o parece relacionado ao contexto da pesquisa' 
        }
      }

      return { isValid: true }

    } catch (error) {
      return { 
        isValid: false, 
        reason: `Erro na valida√ß√£o: ${error instanceof Error ? error.message : 'Erro desconhecido'}` 
      }
    }
  }

  /**
   * Gera imagens usando o Gemini AI com suporte a gera√ß√£o de imagens
   * Utiliza o modelo gemini-2.0-flash-preview-image-generation
   */
  static async generateImage(
    prompt: string,
    options: {
      width?: number
      height?: number
      format?: 'png' | 'jpg' | 'svg'
      context?: string
    } = {}
  ): Promise<{
    success: boolean
    imageUrl?: string
    base64Data?: string
    error?: string
    description?: string
  }> {
    const startTime = Date.now()
    console.log('üé® Iniciando gera√ß√£o de imagem com Gemini AI...')
    console.log(`üìù Prompt: ${prompt.substring(0, 100)}...`)

    try {
      // Verificar se a API key est√° configurada
      if (!process.env.GEMINI_API_KEY) {
        console.warn('‚ö†Ô∏è GEMINI_API_KEY n√£o configurada')
        return {
          success: false,
          error: 'API key do Gemini n√£o configurada',
          description: 'Configure GEMINI_API_KEY no arquivo .env'
        }
      }

      // Configurar prompt otimizado para gera√ß√£o de imagem
      const {
        width = 800,
        height = 600,
        format = 'png',
        context = 'artigo cient√≠fico'
      } = options

      const enhancedPrompt = `
Generate a professional chart/graph image with these specifications:

DESCRIPTION: ${prompt}

TECHNICAL SPECIFICATIONS:
- Dimensions: ${width}x${height} pixels
- Format: ${format.toUpperCase()}
- Context: ${context}
- Quality: High resolution, professional

VISUAL REQUIREMENTS:
- White or neutral background
- Professional color scheme
- Clear, readable text
- Balanced composition
- Suitable for ${context}

Create the image following these exact specifications.
      `

      // NOVA ABORDAGEM: Tentar m√©todo alternativo para gera√ß√£o de imagem
      const result = await this.withRetry(async () => {
        try {
          console.log('ü§ñ Tentando gerar imagem com modelo experimental (nova abordagem)...')
          
          // Tentar m√©todo mais simples sem configura√ß√£o extra
          const imageModel = genAI.getGenerativeModel({ 
            model: 'gemini-2.0-flash-preview-image-generation'
          })

          // Usar prompt mais direto
          const imageResult = await imageModel.generateContent([
            {
              text: enhancedPrompt
            }
          ])
          
          console.log('üñºÔ∏è Resultado da gera√ß√£o de imagem:', imageResult)
          const imageResponse = imageResult.response

          // Verificar diferentes estruturas de resposta
          if (imageResponse.candidates && imageResponse.candidates[0]) {
            const candidate = imageResponse.candidates[0]
            
            // Verificar estrutura de dados da imagem
            if (candidate.content && candidate.content.parts) {
              for (const part of candidate.content.parts) {
                // Procurar dados inline (estrutura padr√£o)
                if (part.inlineData && part.inlineData.data) {
                  console.log('‚úÖ Imagem gerada com sucesso!')
                  
                  return {
                    success: true,
                    base64Data: part.inlineData.data,
                    imageUrl: `data:${part.inlineData.mimeType || 'image/png'};base64,${part.inlineData.data}`,
                    description: `Imagem gerada: ${prompt.substring(0, 50)}...`
                  }
                }
              }
            }
          }

          // Se chegou at√© aqui, n√£o encontrou dados de imagem
          console.log('‚ö†Ô∏è Resposta n√£o cont√©m dados de imagem v√°lidos')
          console.log('üìã Estrutura da resposta:', JSON.stringify(imageResponse, null, 2))
          
          throw new Error('Modelo n√£o retornou dados de imagem v√°lidos')

        } catch (experimentalError) {
          console.log('‚ùå Erro no modelo experimental:', experimentalError)
          console.log('‚ö†Ô∏è Modelo experimental falhou, usando fallback de descri√ß√£o...')
          
          // Fallback: Gerar descri√ß√£o detalhada para uso com SVG
          const textModel = genAI.getGenerativeModel({ 
            model: 'gemini-2.0-flash-exp',
            generationConfig: {
              temperature: 0.3,
              topP: 0.9,
              topK: 20,
              maxOutputTokens: 1024,
              responseMimeType: "text/plain",
            }
          })

          const fallbackPrompt = `
Como especialista em visualiza√ß√£o de dados, descreva exatamente como criar um gr√°fico/diagrama para:

SOLICITA√á√ÉO: ${prompt}
DIMENS√ïES: ${width}x${height}
CONTEXTO: ${context}

Forne√ßa uma descri√ß√£o T√âCNICA e ESPEC√çFICA incluindo:
1. Tipo de gr√°fico (barra, linha, pizza, dispers√£o)
2. Dados espec√≠ficos (valores, categorias, percentuais)
3. Cores exatas (c√≥digos hex)
4. Layout e posicionamento
5. Texto e legendas

FORMATO DE RESPOSTA:
Descri√ß√£o t√©cnica detalhada que permita recriar o gr√°fico exatamente.

Exemplo: "Gr√°fico de barras com 4 categorias (A: 25%, B: 45%, C: 70%, D: 55%). Barras azuis #2563EB, fundo branco, eixo Y 0-100%, t√≠tulo 'Resultados' centralizado, grid horizontal cinza #E5E7EB."
          `

          const fallbackResult = await textModel.generateContent(fallbackPrompt)
          const fallbackResponse = await fallbackResult.response
          const description = fallbackResponse.text().trim()

          return {
            success: false,
            error: 'Gera√ß√£o de imagem AI n√£o dispon√≠vel - usando descri√ß√£o para SVG',
            description: description
          }
        }
      }, 2, 1500)

      const duration = Date.now() - startTime
      console.log(`‚úÖ Processamento de imagem conclu√≠do em ${duration}ms`)
      
      return result

    } catch (error) {
      const duration = Date.now() - startTime
      console.error('‚ùå Erro na gera√ß√£o de imagem:', error)
      console.log(`‚è±Ô∏è Tentativa falhou ap√≥s ${duration}ms`)
      
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido na gera√ß√£o de imagem',
        description: 'N√£o foi poss√≠vel gerar a imagem solicitada. Verifique a configura√ß√£o da API ou tente novamente.'
      }
    }
  }

  /**
   * Salva uma imagem gerada na pasta uploads
   */
  static async saveGeneratedImage(
    base64Data: string,
    filename: string,
    mimeType: string = 'image/png'
  ): Promise<{
    success: boolean
    filePath?: string
    publicUrl?: string
    error?: string
  }> {
    try {
      const fs = require('fs').promises
      const path = require('path')
      
      // Determinar extens√£o baseada no mimeType
      const extension = mimeType.includes('jpeg') ? 'jpg' : 
                      mimeType.includes('svg') ? 'svg' : 'png'
      
      // Gerar nome √∫nico se n√£o especificado
      const timestamp = Date.now()
      const finalFilename = filename.includes('.') ? filename : `${filename}_${timestamp}.${extension}`
      
      // Caminhos
      const uploadsDir = path.join(process.cwd(), 'public', 'uploads')
      const filePath = path.join(uploadsDir, finalFilename)
      const publicUrl = `/uploads/${finalFilename}`
      
      // Garantir que o diret√≥rio existe
      await fs.mkdir(uploadsDir, { recursive: true })
      
      // Converter base64 para buffer
      const imageBuffer = Buffer.from(base64Data, 'base64')
      
      // Salvar arquivo
      await fs.writeFile(filePath, imageBuffer)
      
      console.log(`‚úÖ Imagem salva: ${publicUrl}`)
      
      return {
        success: true,
        filePath,
        publicUrl
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao salvar imagem:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erro desconhecido ao salvar imagem'
      }
    }
  }

  /**
   * Gera e salva uma imagem de gr√°fico/diagrama
   */
  static async generateAndSaveImage(
    prompt: string,
    filename: string,
    options: {
      width?: number
      height?: number
      format?: 'png' | 'jpg' | 'svg'
      context?: string
    } = {}
  ): Promise<{
    success: boolean
    imageUrl?: string
    publicUrl?: string
    filePath?: string
    error?: string
    description?: string
  }> {
    console.log(`üé® Gerando e salvando imagem: ${filename}`)
    
    // Gerar imagem
    const imageResult = await this.generateImage(prompt, options)
    
    if (!imageResult.success || !imageResult.base64Data) {
      return {
        success: false,
        error: imageResult.error || 'Falha na gera√ß√£o da imagem',
        description: imageResult.description
      }
    }
    
    // Salvar imagem
    const mimeType = imageResult.imageUrl?.split(';')[0].split(':')[1] || 'image/png'
    const saveResult = await this.saveGeneratedImage(
      imageResult.base64Data,
      filename,
      mimeType
    )
    
    if (!saveResult.success) {
      return {
        success: false,
        error: saveResult.error || 'Falha ao salvar a imagem'
      }
    }
    
    return {
      success: true,
      imageUrl: imageResult.imageUrl,
      publicUrl: saveResult.publicUrl,
      filePath: saveResult.filePath,
      description: `Imagem gerada e salva com sucesso: ${filename}`
    }
  }

  static async analyzeImage(imageData: string, context: string = ""): Promise<string> {
    // Gerar hash simples do conte√∫do da imagem para cache
    const imageHash = Buffer.from(imageData.substring(0, 100)).toString('base64')
    
    // Verificar cache primeiro
    const cached = this.getCachedImageAnalysis(imageHash)
    if (cached) {
      console.log('üìã An√°lise de imagem encontrada no cache')
      return cached
    }

    const analysis = await this.withRetry(async () => {
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: GENERATION_CONFIG.analysis
      })
      
      const prompt = `
Analise esta imagem no contexto de uma pesquisa acad√™mica e forne√ßa uma descri√ß√£o detalhada e objetiva.

CONTEXTO DA PESQUISA: ${context || 'Artigo cient√≠fico'}

INSTRU√á√ïES:
- Descreva objetivamente o que est√° mostrado na imagem
- Identifique elementos relevantes para pesquisa acad√™mica (gr√°ficos, diagramas, processos, dados, etc.)
- Use linguagem cient√≠fica formal
- Seja espec√≠fico sobre n√∫meros, percentuais, tend√™ncias se vis√≠veis
- Limite: 2-3 frases precisas e descritivas

FORMATO DE RESPOSTA:
Forne√ßa apenas a descri√ß√£o da imagem, sem coment√°rios adicionais.

Exemplo: "Gr√°fico de barras mostrando compara√ß√£o de efici√™ncia entre tr√™s m√©todos, com valores de 45%, 67% e 82% respectivamente"
      `
      
      const imagePart = {
        inlineData: {
          data: imageData,
          mimeType: "image/jpeg"
        }
      }
      
      const result = await model.generateContent([prompt, imagePart])
      const response = await result.response
      const text = response.text()
      
      return text.trim()
    }, 2, 1000).catch(() => 'Imagem relacionada ao tema da pesquisa')

    // Salvar no cache
    this.setCachedImageAnalysis(imageHash, analysis)
    
    return analysis
  }

  static async suggestLiterature(
    topic: string,
    keywords: string,
    fieldOfStudy: string
  ): Promise<Array<{
    title: string
    authors: string
    journal: string
    year: number
    doi: string
    abstract: string
    relevance: string
    citation: string
  }>> {
    return this.withRetry(async () => {
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: GENERATION_CONFIG.literature
      })
      
      const prompt = `
Como um especialista em pesquisa acad√™mica, sugira 5-8 refer√™ncias bibliogr√°ficas relevantes para um artigo cient√≠fico sobre:

T√≥pico: ${topic}
Palavras-chave: ${keywords}
√Årea de estudo: ${fieldOfStudy}

Para cada refer√™ncia, forne√ßa no formato JSON:
- title: t√≠tulo do artigo/livro
- authors: autores principais
- journal: journal ou editora
- year: ano de publica√ß√£o (entre 2018-2024)
- doi: DOI fict√≠cio mas realista
- abstract: resumo de 2-3 frases
- relevance: por que √© relevante (1 frase)
- citation: cita√ß√£o no formato ABNT

Responda APENAS com um array JSON v√°lido, sem texto adicional.
      `
      
      const result = await model.generateContent(prompt)
      const response = await result.response
      const text = response.text()
      
      // Tentar extrair JSON da resposta
      const jsonMatch = text.match(/\[[\s\S]*\]/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
      
      return []
    }, 2, 1000).catch(() => [])
  }

  private static buildArticlePrompt(params: ArticleGenerationParams): string {
    const authorsText = params.authors?.map(a => `${a.name} (${a.institution})`).join(', ') || 'Autor Principal'

    const attachedFilesText = params.attachedFiles?.length 
      ? `\nARQUIVOS ANEXADOS:
${params.attachedFiles.map(file => {
  let preview = ''
  if (file.content) {
    if (file.type === 'image') {
      preview = `\n  ‚úì IMAGEM SALVA: ${file.content}`
    } else {
      preview = '\n  CONTE√öDO PREVIEW: ' + file.content.substring(0, 200) + '...'
    }
  }
  return `- ${file.fileName} (Tipo: ${file.type}, Tamanho: ${file.size})${preview}`
}).join('\n')}

ORIENTA√á√ïES PARA ARQUIVOS:
${params.attachedFiles.map(file => {
  if (file.type === 'data') {
    return `- DADOS ESTRUTURADOS: Use os dados fornecidos para an√°lises nas se√ß√µes de Metodologia e Resultados${file.content ? ' - Gere an√°lises espec√≠ficas baseadas no conte√∫do' : ''}
    - IMPORTANTE: N√ÉO mencione o nome do arquivo "${file.fileName}" no texto do artigo
    - Refira-se genericamente como "dados coletados", "informa√ß√µes obtidas", "base de dados da pesquisa"`
  } else if (file.type === 'thesis') {
    return `- BASE TE√ìRICA: Use como fundamenta√ß√£o na Revis√£o da Literatura${file.content ? ' - Incorpore as informa√ß√µes nas fundamenta√ß√µes te√≥ricas' : ''}
    - IMPORTANTE: N√ÉO mencione o nome do arquivo "${file.fileName}" no texto do artigo
    - Refira-se genericamente como "literatura especializada", "estudos anteriores", "pesquisas relacionadas"`
  } else if (file.type === 'image') {
    return `- OBRIGAT√ìRIO: Use EXATAMENTE a refer√™ncia [Imagem: ${file.fileName}] (n√£o invente outros nomes)
  - CONTE√öDO DA IMAGEM: ${file.description || 'Imagem relacionada ao tema da pesquisa'}
  - ESPA√áAMENTO E CENTRALIZA√á√ÉO: Sempre use <div style="margin: 30px 0; text-align: center;">[Imagem: ${file.fileName}]</div>
  - IMPORTANTE: As tags [Imagem: nome] s√£o apenas marcadores - N√ÉO s√£o imagens reais
  - N√ÉO MENCIONE O NOME DO ARQUIVO no texto: Em vez de "conforme ${file.fileName}", use "conforme ilustrado na figura"
  - CONTEXTO ANTES: Inclua par√°grafo explicativo antes da imagem descrevendo o que ela mostra
  - AN√ÅLISE DEPOIS: Inclua par√°grafo de interpreta√ß√£o ap√≥s a imagem
  - SEMPRE descreva o conte√∫do da imagem no texto ao redor da tag
  - Exemplo completo:
    
    <p>O processo metodol√≥gico adotado segue etapas espec√≠ficas, conforme ilustrado na figura que apresenta o fluxograma detalhado das atividades.</p>
    
    <div style="margin: 30px 0; text-align: center;">
    [Imagem: ${file.fileName}]
    </div>
    
    <p>A ilustra√ß√£o demonstra claramente ${file.description || 'os aspectos principais da metodologia'}, evidenciando a sequ√™ncia l√≥gica das etapas propostas.</p>
    
  - N√ÉO use imagens fict√≠cias como "logo.png" ou "diagrama.jpg" - use APENAS "${file.fileName}"
  - Considere o conte√∫do visual ao referenciar: ${file.description || 'adapte a descri√ß√£o ao contexto'}
  - DISTRIBUA: M√°ximo 1 imagem por se√ß√£o, com pelo menos 2-3 par√°grafos entre imagens
  - SEMPRE CENTRALIZE: Todas as imagens devem aparecer centralizadas na p√°gina
  - ESCREVA sobre a imagem, n√£o apenas coloque a tag`
  }
  return ''
}).filter(Boolean).join('\n')}

IMPORTANTE SOBRE IMAGENS:
${params.attachedFiles?.filter(f => f.type === 'image').length ? 
  `- Use APENAS as imagens anexadas pelo usu√°rio: ${params.attachedFiles.filter(f => f.type === 'image').map(f => f.fileName).join(', ')}
- N√ÉO invente nomes de imagens fict√≠cias
- Cada imagem anexada DEVE ser referenciada pelo menos uma vez no artigo
- Use o nome EXATO do arquivo anexado` :
  `- N√ÉO CRIE tags [Imagem: ...] - n√£o h√° imagens anexadas
- Se precisar ilustrar conceitos, use APENAS descri√ß√µes textuais
- JAMAIS invente refer√™ncias como [Imagem: logo.png], [Imagem: diagrama.jpg]
- Descreva visualmente os processos em texto corrido sem tags`
}
` 
      : ''

    const chartsText = params.includeCharts 
      ? `\nGR√ÅFICOS AUTOM√ÅTICOS:
- USE TAGS ESPECIAIS: Use tags [CHART:id] para marcar onde os gr√°ficos devem aparecer
- PROCESSAMENTO AUTOM√ÅTICO: As tags ser√£o automaticamente convertidas em imagens reais
- QUANTIDADE FLEX√çVEL: Inclua 1-3 gr√°ficos conforme necess√°rio para o conte√∫do
- IDs ALEAT√ìRIOS: Gere IDs √∫nicos e aleat√≥rios (ex: chart_abc123, graph_xyz789, data_def456)
${params.chartIds ? 
  `- GR√ÅFICOS DISPON√çVEIS:
${params.chartIds.map((id, index) => `  * Use [CHART:${id}] onde for mais apropriado contextualmente`).join('\n')}` :
  `- EXEMPLOS DE IDs ALEAT√ìRIOS:
  * [CHART:analysis_rnd847] para an√°lises gerais
  * [CHART:comparison_xyz123] para compara√ß√µes
  * [CHART:distribution_abc456] para distribui√ß√µes`
}

INSTRU√á√ïES PARA TAGS DE GR√ÅFICO:
- POSICIONAMENTO: Coloque as tags [CHART:id] onde o gr√°fico agregue valor cient√≠fico
- CONTEXTO GEN√âRICO: Refira-se ao gr√°fico como "ilustra√ß√£o", "demonstra√ß√£o", "visualiza√ß√£o"
- EVITE NOMES ESPEC√çFICOS: N√ÉO mencione o ID do gr√°fico no texto do artigo
- AN√ÅLISE: Sempre inclua um par√°grafo de an√°lise DEPOIS da tag
- ESPA√áAMENTO: Use <div style="margin: 40px 0; text-align: center;">[CHART:id]</div>
- IMPORTANTE: As tags [CHART:id] ser√£o automaticamente convertidas em imagens reais

EXEMPLO CORRETO DE REFER√äNCIA GEN√âRICA:
"A metodologia adotada seguiu um processo estruturado, conforme demonstrado na visualiza√ß√£o a seguir.

<div style="margin: 40px 0; text-align: center;">
[CHART:process_rnd847]
</div>

A ilustra√ß√£o evidencia a sequ√™ncia l√≥gica das atividades, demonstrando a integra√ß√£o entre as diferentes fases da pesquisa."

DIRETRIZES IMPORTANTES:
- NUNCA mencione o nome/ID do gr√°fico no texto (ex: "chart_abc123", "gr√°fico process_rnd847")
- USE termos gen√©ricos: "a visualiza√ß√£o", "o gr√°fico", "a ilustra√ß√£o", "a demonstra√ß√£o"
- DISTRIBUA conforme necess√°rio - n√£o force 3 gr√°ficos se n√£o fizer sentido
- CONTEXTUALIZE cada gr√°fico no texto ao redor sem nomear especificamente
- As imagens ser√£o geradas automaticamente baseadas no contexto da se√ß√£o
`
      : ''

    return `Voc√™ √© um redator cient√≠fico profissional especializado em artigos acad√™micos de alta qualidade. Crie um artigo cient√≠fico COMPLETO e DETALHADO sem usar placeholders.

    INFORMA√á√ïES OBRIGAT√ìRIAS:
    ‚Ä¢ T√≠tulo: ${params.title}
    ‚Ä¢ √Årea de Estudo: ${params.fieldOfStudy}
    ‚Ä¢ Metodologia: ${params.methodology}
    ‚Ä¢ Autores: ${authorsText}
    ‚Ä¢ Abstract LITERAL: "${params.abstract}"
    ‚Ä¢ Keywords LITERAIS: "${params.keywords}"

    IMPERATIVO: Use EXATAMENTE o abstract e keywords fornecidos - n√£o modifique uma v√≠rgula!

    ${attachedFilesText}
    ${chartsText}

    üö´ PROIBI√á√ÉO CR√çTICA - N√ÉO MENCIONAR ARQUIVOS:
    ‚Ä¢ JAMAIS cite nomes de arquivos no texto do artigo (ex: "dados.csv", "pesquisa.pdf", "imagem.jpg")
    ‚Ä¢ N√ÉO use frases como "baseado no arquivo X", "conforme documento Y", "segundo dados.csv"
    ‚Ä¢ USE sempre refer√™ncias gen√©ricas: "dados coletados", "informa√ß√µes obtidas", "literatura especializada"
    ‚Ä¢ EVITE: "Os dados do arquivo dados.csv mostram..." 
    ‚Ä¢ PREFIRA: "Os dados coletados revelam..."
    ‚Ä¢ O artigo deve parecer natural, sem refer√™ncias a fontes externas espec√≠ficas

    DIRETRIZES FUNDAMENTAIS:
    ‚úì Idioma: Portugu√™s brasileiro acad√™mico formal
    ‚úì Conte√∫do: 100% espec√≠fico e detalhado (ZERO placeholders)
    ‚úì Formato: HTML puro com CSS inline (sem DOCTYPE/html/head/body)
    ‚úì Dados: Realistas e quantitativos (invente n√∫meros espec√≠ficos se necess√°rio)
    ‚úì Extens√£o: Artigo completo com ~2.500 palavras distribu√≠das pelas se√ß√µes

    PROIBI√á√ïES ABSOLUTAS:
    ‚úó Placeholders como [inserir], [descrever], [mencionar], [adicionar]
    ‚úó Frases vagas como "diversos estudos mostram" ou "os dados indicam"
    ‚úó Tags HTML estruturais (DOCTYPE, html, head, body)
    ‚úó M√∫ltiplas linhas vazias consecutivas

    REGRAS PARA ELEMENTOS VISUAIS:
    ${params.includeCharts ? 
    `üîπ GR√ÅFICOS (QUANTIDADE FLEX√çVEL): Inclua 1-3 gr√°ficos conforme necess√°rio
    ${params.chartIds ? 
      `‚Ä¢ Use SOMENTE estas TAGS: ${params.chartIds.map(id => `[CHART:${id}]`).join(', ')}
    ‚Ä¢ FORMATO CORRETO: [CHART:id] (N√ÉO use [Imagem: chart_id.svg])
    ‚Ä¢ REFER√äNCIAS GEN√âRICAS: Use "a visualiza√ß√£o", "o gr√°fico", "a ilustra√ß√£o" - NUNCA mencione o ID
    ‚Ä¢ ESPA√áAMENTO E CENTRALIZA√á√ÉO OBRIGAT√ìRIOS: <div style="margin: 40px 0; text-align: center;">[CHART:id]</div>
    ‚Ä¢ IMPORTANTE: As tags [CHART:id] s√£o convertidas automaticamente em imagens SVG profissionais
    ‚Ä¢ PADR√ÉO: Par√°grafo contexto + Tag de gr√°fico centralizada + Par√°grafo an√°lise descritiva
    ‚Ä¢ Distribua conforme necess√°rio - n√£o force se n√£o agregar valor
    ‚Ä¢ DIST√ÇNCIA M√çNIMA: 3 par√°grafos entre gr√°ficos consecutivos
    ‚Ä¢ SEMPRE DESCREVA genericamente o que o gr√°fico mostra no texto ao redor
    ‚Ä¢ SEMPRE CENTRALIZE: Todas as tags de gr√°fico devem aparecer centralizadas
    ‚Ä¢ EXEMPLO DE REFER√äNCIA CORRETA: "Os dados apresentam tend√™ncias significativas, conforme demonstrado na visualiza√ß√£o a seguir. A an√°lise evidencia os padr√µes identificados na pesquisa."` :
      `‚Ä¢ USE TAGS: [CHART:id_aleatorio] com IDs √∫nicos gerados aleatoriamente
      ‚Ä¢ FORMATO: [CHART:analysis_rnd123], [CHART:comparison_xyz789], [CHART:results_abc456]
      ‚Ä¢ REFER√äNCIAS GEN√âRICAS: "a visualiza√ß√£o", "o gr√°fico", "a demonstra√ß√£o"
      ‚Ä¢ Sugest√£o de distribui√ß√£o flex√≠vel:
      - [CHART:methodology_rnd123] se apropriado na Metodologia
      - [CHART:results_xyz789] se apropriado nos Resultados
      - [CHART:discussion_abc456] se apropriado na Discuss√£o
      ‚Ä¢ SEMPRE centralize: <div style="margin: 40px 0; text-align: center;">[CHART:id]</div>
      ‚Ä¢ NUNCA mencione os IDs no texto do artigo`
    }` : 
    `üîπ GR√ÅFICOS: N√£o solicitados - N√ÉO criar tags de gr√°fico`
    }

    ${params.attachedFiles?.some(f => f.type === 'image') ? 
    `üîπ IMAGENS: Use ${params.attachedFiles.filter(f => f.type === 'image').map(f => `[Imagem: ${f.fileName}]`).join(', ')}
    ${params.attachedFiles.filter(f => f.type === 'image').length ? 
      `‚Ä¢ IMPORTANTE: [Imagem: nome] s√£o MARCADORES, n√£o imagens reais
    ‚Ä¢ CONTE√öDO DAS IMAGENS: Integre baseado nas descri√ß√µes fornecidas
    ‚Ä¢ ESPA√áAMENTO E CENTRALIZA√á√ÉO OBRIGAT√ìRIOS: <div style="margin: 30px 0; text-align: center;">[Imagem: nome]</div>
    ‚Ä¢ SEMPRE contextualize e DESCREVA o que cada imagem mostra
    ‚Ä¢ PADR√ÉO: Par√°grafo contexto + Marcador imagem + Par√°grafo an√°lise descritiva
    ‚Ä¢ DISTRIBUI√á√ÉO: M√°ximo 1 imagem por se√ß√£o de 500+ palavras
    ‚Ä¢ TODAS AS IMAGENS DEVEM SER CENTRALIZADAS
    ‚Ä¢ ESCREVA sobre a imagem, n√£o apenas coloque a tag
    ‚Ä¢ Exemplo: "A an√°lise visual dos dados demonstra tend√™ncias significativas, conforme ilustrado na imagem a seguir [Imagem: ${params.attachedFiles.filter(f => f.type === 'image')[0]?.fileName}], que evidencia ${params.attachedFiles.filter(f => f.type === 'image')[0]?.description || 'aspectos relevantes da pesquisa'}"` : ''}` :
    `üîπ IMAGENS: N√£o anexadas - N√ÉO criar tags [Imagem:]`
    }

    ESTRUTURA E ESPECIFICA√á√ïES:

    1Ô∏è‚É£ T√çTULO PRINCIPAL
    ‚Ä¢ Use <h1 style="color: #2563eb; font-weight: bold; text-align: center; margin-bottom: 30px; font-size: 28px; line-height: 1.3;">
    ‚Ä¢ Centralize o t√≠tulo com espa√ßamento adequado

    2Ô∏è‚É£ AUTORES E AFILIA√á√ïES
    ‚Ä¢ Use <div style="text-align: center; margin: 20px 0; color: #374151;">
    ‚Ä¢ Formate: <strong>Nome do Autor</strong><br><em>Institui√ß√£o</em>
    ‚Ä¢ Para m√∫ltiplos autores: separe com <hr style="margin: 10px 40%; border: 1px solid #e5e7eb;">

    3Ô∏è‚É£ RESUMO/ABSTRACT
    ‚Ä¢ Use se√ß√£o destacada com <div style="background: #f8fafc; padding: 20px; border-left: 4px solid #2563eb; margin: 30px 0;">
    ‚Ä¢ T√≠tulo da se√ß√£o: <h2 style="color: #1f2937; margin-bottom: 15px; font-size: 18px;">Resumo</h2>
    ‚Ä¢ Conte√∫do: Use LITERALMENTE "${params.abstract}"
    ‚Ä¢ N√£o modifique nem uma v√≠rgula do abstract fornecido

    4Ô∏è‚É£ PALAVRAS-CHAVE
    ‚Ä¢ Use <div style="margin: 20px 0; padding: 15px; background: #f1f5f9;">
    ‚Ä¢ T√≠tulo: <strong style="color: #374151;">Palavras-chave:</strong>
    ‚Ä¢ Conte√∫do: Use LITERALMENTE "${params.keywords}"
    ‚Ä¢ Separe com v√≠rgulas, sem modifica√ß√µes

    5Ô∏è‚É£ INTRODU√á√ÉO (400-500 palavras)
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Introdu√ß√£o</h2>
    ‚Ä¢ Contextualize o problema com dados espec√≠ficos
    ‚Ä¢ Cite estat√≠sticas reais da √°rea
    ‚Ä¢ Estabele√ßa objetivos claros e mensur√°veis
    ‚Ä¢ Justifique a relev√¢ncia com n√∫meros

    6Ô∏è‚É£ REVIS√ÉO DA LITERATURA (500-600 palavras)
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Revis√£o da Literatura</h2>
    ‚Ä¢ Cite 5-8 estudos com autores e anos espec√≠ficos
    ‚Ä¢ Compare metodologias e resultados quantitativos
    ‚Ä¢ Identifique lacunas espec√≠ficas na literatura
    ‚Ä¢ Use transi√ß√µes fluidas entre os t√≥picos

    7Ô∏è‚É£ METODOLOGIA (400-500 palavras)
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Metodologia</h2>
    ‚Ä¢ Descreva popula√ß√£o, amostra e crit√©rios espec√≠ficos
    ‚Ä¢ Detalhe instrumentos e procedimentos passo a passo
    ‚Ä¢ Especifique an√°lises estat√≠sticas (testes, software, p-valor)
    ‚Ä¢ Inclua aspectos √©ticos e temporais

    8Ô∏è‚É£ RESULTADOS (500-600 palavras)
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Resultados</h2>
    ‚Ä¢ Apresente dados quantitativos espec√≠ficos (percentuais, m√©dias)
    ‚Ä¢ Organize em subt√≥picos claros
    ‚Ä¢ Relacione com objetivos estabelecidos
    ‚Ä¢ Use linguagem objetiva e precisa

    9Ô∏è‚É£ DISCUSS√ÉO (450-550 palavras)
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Discuss√£o</h2>
    ‚Ä¢ Compare resultados com literatura citada
    ‚Ä¢ Explique implica√ß√µes pr√°ticas e te√≥ricas
    ‚Ä¢ Reconhe√ßa limita√ß√µes espec√≠ficas
    ‚Ä¢ Sugira melhorias metodol√≥gicas

    üîü CONCLUS√ÉO (300-350 palavras)
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Conclus√£o</h2>
    ‚Ä¢ Sintetize achados principais
    ‚Ä¢ Destaque contribui√ß√µes inovadoras
    ‚Ä¢ Proponha pesquisas futuras espec√≠ficas
    ‚Ä¢ Termine com impacto pr√°tico

    1Ô∏è‚É£1Ô∏è‚É£ REFER√äNCIAS
    ‚Ä¢ T√≠tulo: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Refer√™ncias</h2>
    ‚Ä¢ 6-10 refer√™ncias em formato ABNT
    ‚Ä¢ Inclua DOIs realistas
    ‚Ä¢ Varie tipos: artigos, livros, relat√≥rios
    ‚Ä¢ Use <ol> com espa√ßamento adequado

    ESTILO E FORMATA√á√ÉO HTML:
    ‚Ä¢ T√≠tulos principais: color: #2563eb, font-weight: bold
    ‚Ä¢ Subt√≠tulos: color: #1f2937, border-bottom com cor azul
    ‚Ä¢ Destaques: background amarelo (#fef3c7) para termos-chave
    ‚Ä¢ Par√°grafos: line-height 1.6, margin adequado
    ‚Ä¢ Listas: background cinza claro (#f8fafc), padding
    ‚Ä¢ Texto: color #374151, justificado

    ESPA√áAMENTO PARA ELEMENTOS VISUAIS:
    ‚Ä¢ IMAGENS: Adicione margin: 30px 0 E text-align: center
    ‚Ä¢ GR√ÅFICOS COMO IMAGENS: Adicione margin: 40px 0 E text-align: center (centralizados)
    ‚Ä¢ CONTEXTO: Sempre inclua par√°grafo explicativo ANTES da imagem/gr√°fico
    ‚Ä¢ AN√ÅLISE: Sempre inclua par√°grafo de an√°lise DEPOIS da imagem/gr√°fico
    ‚Ä¢ DISTRIBUI√á√ÉO: M√°ximo 1 elemento visual por se√ß√£o longa (500+ palavras)
    ‚Ä¢ RESPIRA√á√ÉO: Deixe pelo menos 2-3 par√°grafos entre elementos visuais consecutivos
    ‚Ä¢ CENTRALIZA√á√ÉO: Todas as imagens e gr√°ficos devem aparecer centralizados

    EXEMPLO DE ESPACIAMENTO CORRETO:
    <h1 style="color: #2563eb; font-weight: bold; text-align: center; margin-bottom: 30px;">T√≠tulo do Artigo</h1>
    
    <div style="text-align: center; margin: 20px 0; color: #374151;">
    <strong>Nome do Autor</strong><br><em>Universidade, Pa√≠s</em>
    </div>
    
    <div style="background: #f8fafc; padding: 20px; border-left: 4px solid #2563eb; margin: 30px 0;">
    <h2 style="color: #1f2937; margin-bottom: 15px;">Resumo</h2>
    <p>Conte√∫do do abstract...</p>
    </div>
    
    <div style="margin: 20px 0; padding: 15px; background: #f1f5f9;">
    <strong>Palavras-chave:</strong> palavra1, palavra2, palavra3
    </div>
    
    <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px; margin: 40px 0 20px 0;">Introdu√ß√£o</h2>
    <p>Primeiro par√°grafo...</p>
    
    <p>Contextualiza√ß√£o da imagem...</p>
    
    <div style="margin: 30px 0; text-align: center;">
    [Imagem: exemplo.jpg]
    </div>
    
    <p>An√°lise da imagem apresentada...</p>

    EXEMPLO DE ESPECIFICIDADE OBRIGAT√ìRIA:
    ‚ùå "Os resultados mostraram melhoria significativa"
    ‚úÖ "Os resultados demonstraram melhoria de 34,7% (p<0,001) na vari√°vel X, com desvio padr√£o de ¬±2,3"

    ‚ùå "Diversos autores concordam"
    ‚úÖ "Silva et al. (2023), Santos (2022) e Oliveira & Costa (2024) convergem quanto √† efic√°cia de 78-85%"

    ‚ùå "Baseado no arquivo dashboard.tsx obtivemos..." 
    ‚úÖ "A implementa√ß√£o do painel administrativo resultou em..."
    
    ‚ùå "Como observado em components/chart.tsx..."
    ‚úÖ "O componente de visualiza√ß√£o desenvolvido..."

    FLUXO E APRESENTA√á√ÉO:
    ‚Ä¢ IN√çCIO LIMPO: Comece com t√≠tulo centralizado e bem formatado
    ‚Ä¢ TRANSI√á√ïES: Use conectivos entre se√ß√µes para fluidez
    ‚Ä¢ ESPA√áAMENTO: Mantenha hierarquia visual clara com margins consistentes
    ‚Ä¢ LEGIBILIDADE: Use cores e estilos que facilitam a leitura
    ‚Ä¢ PROFISSIONALISMO: Cada se√ß√£o deve ter identidade visual pr√≥pria mas harm√¥nica

    INICIE AGORA com <h1> centralizado e bem formatado - sem pre√¢mbulos ou tags estruturais:`
  }

  private static cleanMarkdownCodeBlocks(text: string): string {
    // Remove blocos de c√≥digo markdown no in√≠cio e fim
    let cleanText = text.trim()
    
    // Remove ```html ou ``` no in√≠cio
    if (cleanText.startsWith('```html')) {
      cleanText = cleanText.substring(7).trim()
    } else if (cleanText.startsWith('```')) {
      cleanText = cleanText.substring(3).trim()
    }
    
    // Remove ``` no final
    if (cleanText.endsWith('```')) {
      cleanText = cleanText.substring(0, cleanText.length - 3).trim()
    }
    
    // Remove observa√ß√µes ap√≥s o conte√∫do
    const lines = cleanText.split('\n')
    let contentEndIndex = lines.length
    
    for (let i = lines.length - 1; i >= 0; i--) {
      const line = lines[i].trim()
      if (line.startsWith('**Observa√ß√µes:**') || 
          line.startsWith('**') || 
          line.includes('esqueleto') ||
          line.includes('Lembre-se') ||
          line.includes('placeholder') ||
          line.includes('Nota:') ||
          line.includes('observa√ß√£o')) {
        contentEndIndex = i
        break
      }
    }
    
    // Processar linhas para remover espa√ßamentos excessivos
    const processedLines = lines.slice(0, contentEndIndex)
    
    // Remover linhas vazias excessivas no in√≠cio
    let startIndex = 0
    while (startIndex < processedLines.length && processedLines[startIndex].trim() === '') {
      startIndex++
    }
    
    // Reduzir m√∫ltiplas linhas vazias consecutivas para no m√°ximo 1
    const finalLines = []
    let emptyLineCount = 0
    
    for (let i = startIndex; i < processedLines.length; i++) {
      const line = processedLines[i]
      
      if (line.trim() === '') {
        emptyLineCount++
        if (emptyLineCount <= 1) {
          finalLines.push(line)
        }
      } else {
        emptyLineCount = 0
        finalLines.push(line)
      }
    }
    
    return finalLines.join('\n').trim()
  }

  private static buildSectionPrompt(
    sectionType: string,
    context: string,
    additionalInfo?: string
  ): string {
    const sectionInstructions = {
      introduction: 'Escreva uma introdu√ß√£o cient√≠fica abrangente que contextualize o problema, apresente a relev√¢ncia do tema e estabele√ßa claramente os objetivos da pesquisa.',
      methodology: 'Descreva detalhadamente a metodologia utilizada, incluindo abordagem, materiais, procedimentos e an√°lises estat√≠sticas quando aplic√°vel.',
      results: 'Apresente os resultados de forma clara e objetiva, incluindo dados, an√°lises e observa√ß√µes principais.',
      discussion: 'Desenvolva uma discuss√£o cr√≠tica dos resultados, comparando com a literatura, apresentando limita√ß√µes e implica√ß√µes dos achados.',
      conclusion: 'Elabore uma conclus√£o que sintetize os principais achados, destaque as contribui√ß√µes do trabalho e sugira dire√ß√µes futuras.'
    }

    return `
Como especialista em reda√ß√£o cient√≠fica e web design, ${sectionInstructions[sectionType as keyof typeof sectionInstructions]}

CONTEXTO DO ARTIGO:
${context}

INFORMA√á√ïES ADICIONAIS:
${additionalInfo || 'Nenhuma informa√ß√£o adicional fornecida'}

FORMATA√á√ÉO E ESTILO AVAN√áADO:
- Use HTML simples com CSS inline para formata√ß√£o profissional
- Aplique estilos como: <h2 style="color: #1f2937; border-bottom: 2px solid #3b82f6; padding-bottom: 8px;">
- Use cores e espa√ßamentos para melhor legibilidade
- Destaque pontos importantes com <strong style="background-color: #dbeafe; padding: 2px 4px; border-radius: 3px;">
- Crie listas estilizadas com <ul style="background: #f8fafc; padding: 16px; border-radius: 8px;">
- IMPORTANTE: N√£o use DOCTYPE, html, head ou body - apenas conte√∫do HTML puro

SUPORTE A MULTIM√çDIA (Considere Espa√ßo Visual):
- IMAGENS: Use APENAS se especificado no contexto: [Imagem: nome_do_arquivo]
- GR√ÅFICOS: Use APENAS se especificado no contexto: [CHART:id_fornecido]

IMPORTANTE: [CHART:id] e [Imagem: nome] s√£o MARCADORES que ser√£o processados depois
- N√ÉO s√£o gr√°ficos ou imagens reais no momento da escrita
- SEMPRE escreva texto descritivo ao redor desses marcadores
- CONTEXTUALIZE antes: "Os dados coletados revelam...", "conforme demonstrado..."
- ANALISE depois: "evidenciando que...", "demonstrando a tend√™ncia..."

- ESPA√áO VISUAL: Imagens ocupam ~200-500px de altura, gr√°ficos ~300-400px
- ESPA√áAMENTO E CENTRALIZA√á√ÉO OBRIGAT√ìRIOS: 
  * Imagens: <div style="margin: 30px 0; text-align: center;">[Imagem: nome]</div>
  * Gr√°ficos: <div style="margin: 40px 0;">[CHART:id]</div>
- ESTRUTURA PADR√ÉO:
  * Par√°grafo de contexto (explicando o que ser√° mostrado)
  * Elemento visual com espa√ßamento e centraliza√ß√£o (para imagens)
  * Par√°grafo de an√°lise (interpretando o que foi mostrado)
- DISTRIBUI√á√ÉO: M√°ximo 1 elemento visual por se√ß√£o, com 2-3 par√°grafos entre elementos
- Quando incluir elementos visuais, reduza proporcionalmente o texto para equilibrar
- Integre naturalmente sem for√ßar se n√£o for apropriado para a se√ß√£o
- TODAS AS IMAGENS DEVEM SER CENTRALIZADAS
- Exemplo de estrutura correta:
  
  <p>A metodologia empregada segue etapas espec√≠ficas...</p>
  
  <div style="margin: 30px 0; text-align: center;">
  [Imagem: processo.jpg]
  </div>
  
  <p>Conforme demonstrado, o processo ilustra...</p>
  
  <p>Os resultados apresentados evidenciam...</p>
  
  <div style="margin: 40px 0;">
  [CHART:dados_principais]
  </div>
  
  <p>A an√°lise dos dados revela tend√™ncias...</p>

DIRETRIZES:
- Use linguagem cient√≠fica formal
- Inclua cita√ß√µes apropriadas (formato: Autor, ano)
- Mantenha coer√™ncia com o contexto fornecido
- Extens√£o: 300-500 palavras (ajuste se incluir elementos visuais)
- Combine HTML/CSS para apresenta√ß√£o visual atrativa
- Seja estrat√©gico com multim√≠dia - qualidade sobre quantidade

Gere apenas a se√ß√£o solicitada, come√ßando diretamente com o conte√∫do, sem t√≠tulos adicionais.
    `
  }
}
