// Teste dos gr√°ficos SVG com tamanho maior
const testData = {
  charts: [],
  dataFiles: [{
    fileName: 'vendas_trimestre.csv',
    content: `Trimestre,Vendas,Meta
Q1 2024,180000,150000
Q2 2024,220000,180000
Q3 2024,280000,200000
Q4 2024,320000,250000`,
    type: 'text/csv',
    size: '98 bytes'
  }],
  content: `An√°lise de performance de vendas por trimestre:

[CHART:vendas_vs_meta] - Compara√ß√£o de vendas versus metas por trimestre

Os resultados mostram crescimento consistente ao longo do ano.`,
  context: 'An√°lise trimestral para demonstrar gr√°ficos maiores'
}

async function testLargerSVG() {
  console.log('üß™ Testando gera√ß√£o de gr√°ficos SVG com tamanho maior...\n')
  
  try {
    const response = await fetch('http://localhost:3001/api/process-charts-new', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData)
    })

    const result = await response.json()
    
    console.log('üìä Resultado do teste:')
    console.log(`‚úÖ Status: ${response.status}`)
    console.log(`‚úÖ Sucesso: ${result.success}`)
    console.log(`‚úÖ Mensagem: ${result.message}`)
    
    if (result.chartImages) {
      console.log('\nüé® Gr√°ficos gerados:')
      Object.keys(result.chartImages).forEach(id => {
        const chartHtml = result.chartImages[id]
        const isSVG = chartHtml.includes('<svg')
        const hasLargeViewBox = chartHtml.includes('viewBox="0 0 1200 800"')
        const hasLargeMaxWidth = chartHtml.includes('max-width: 1200px')
        
        console.log(`\nüìà Gr√°fico ${id}:`)
        console.log(`   üìù Tamanho: ${chartHtml.length} caracteres`)
        console.log(`   üñºÔ∏è Formato: ${isSVG ? 'SVG inline ‚úÖ' : 'Imagem ‚ùå'}`)
        console.log(`   üìê ViewBox 1200x800: ${hasLargeViewBox ? 'Sim ‚úÖ' : 'N√£o ‚ùå'}`)
        console.log(`   üì± Max-width 1200px: ${hasLargeMaxWidth ? 'Sim ‚úÖ' : 'N√£o ‚ùå'}`)
        
        if (isSVG) {
          // Verificar dimens√µes no SVG
          const widthMatch = chartHtml.match(/width="(\d+)"/)
          const heightMatch = chartHtml.match(/height="(\d+)"/)
          const viewBoxMatch = chartHtml.match(/viewBox="0 0 (\d+) (\d+)"/)
          
          if (widthMatch && heightMatch) {
            console.log(`   üìè Dimens√µes originais: ${widthMatch[1]}x${heightMatch[1]}`)
          }
          
          if (viewBoxMatch) {
            console.log(`   üìê ViewBox: ${viewBoxMatch[1]}x${viewBoxMatch[2]}`)
          }
          
          // Verificar se tem dados
          const hasData = chartHtml.includes('Q1') || chartHtml.includes('180000') || chartHtml.includes('Vendas')
          console.log(`   üìä Dados presentes: ${hasData ? 'Sim ‚úÖ' : 'N√£o ‚ùå'}`)
          
          // Preview pequeno
          console.log(`\nüìÑ In√≠cio do HTML:`)
          console.log(chartHtml.substring(0, 200) + '...\n')
        }
      })
    }
    
    console.log('\nüéØ Verifica√ß√£o de tamanho:')
    if (result.success && result.chartImages) {
      const hasLargeSVG = Object.values(result.chartImages).some(html => 
        html.includes('max-width: 1200px') && html.includes('viewBox="0 0 1200 800"')
      )
      
      if (hasLargeSVG) {
        console.log('‚úÖ SUCESSO: Gr√°ficos agora s√£o gerados em tamanho maior (1200x800)!')
        console.log('‚úÖ Max-width configurado para 1200px - gr√°ficos mais vis√≠veis!')
      } else {
        console.log('‚ùå PROBLEMA: Gr√°ficos ainda n√£o est√£o no tamanho maior.')
      }
    } else {
      console.log('‚ùå ERRO: Falha na gera√ß√£o de gr√°ficos.')
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message)
  }
}

// Executar o teste
testLargerSVG()
