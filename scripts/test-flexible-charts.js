/**
 * Teste das modifica√ß√µes: gr√°ficos flex√≠veis com IDs aleat√≥rios
 */

const testFlexibleCharts = async () => {
  console.log('üß™ Testando sistema de gr√°ficos flex√≠vel...\n')

  const testData = `
Participante,Idade,Grupo,Pontuacao
Ana,25,Experimental,85
Jo√£o,30,Controle,72
Maria,28,Experimental,91
Pedro,32,Controle,68
`

  try {
    // Teste 1: Verificar se gera quantidade flex√≠vel de gr√°ficos
    console.log('üìä Teste 1: An√°lise com quantidade flex√≠vel')
    const response1 = await fetch('http://localhost:3000/api/analyze-data-charts', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        dataFiles: [{
          fileName: 'dados_pequenos.csv',
          content: testData,
          type: 'text/csv'
        }],
        context: "Estudo comparativo pequeno entre grupos"
      })
    })

    const result1 = await response1.json()
    console.log(`‚úÖ Gr√°ficos gerados: ${result1.charts?.length || 0}`)
    console.log('üìù Valida√ß√£o: Deve gerar 1-2 gr√°ficos (n√£o obrigatoriamente 3)')
    
    if (result1.charts?.length > 0) {
      console.log('\nüìã Gr√°ficos identificados:')
      result1.charts.forEach((chart, i) => {
        console.log(`${i+1}. ID: ${chart.id}`)
        console.log(`   Nome: ${chart.name}`)
        console.log(`   Tipo: ${chart.type}`)
      })
    }

    console.log('\n' + '='.repeat(60) + '\n')

    // Teste 2: Gera√ß√£o de artigo simulando IDs aleat√≥rios
    console.log('üìù Teste 2: Simula√ß√£o de prompt de artigo')
    
    // Simular par√¢metros como seria usado no sistema real
    const mockParams = {
      title: "Estudo Comparativo de Metodologias",
      includeCharts: true,
      chartIds: ['analysis_rnd847', 'comparison_xyz123'], // IDs aleat√≥rios
      abstract: "Este estudo compara metodologias...",
      keywords: "metodologia, compara√ß√£o, an√°lise"
    }

    console.log('üéØ Configura√ß√£o simulada:')
    console.log(`- Gr√°ficos: ${mockParams.includeCharts ? 'SIM' : 'N√ÉO'}`)
    console.log(`- IDs sugeridos: ${mockParams.chartIds?.join(', ') || 'Nenhum'}`)
    console.log(`- Quantidade: ${mockParams.chartIds?.length || 0} (flex√≠vel)`)
    
    console.log('\nüìã Prompt resultante incluiria:')
    console.log('- "QUANTIDADE FLEX√çVEL: Inclua 1-3 gr√°ficos conforme necess√°rio"')
    console.log('- "IDs ALEAT√ìRIOS: Gere IDs √∫nicos e aleat√≥rios"')
    console.log('- "REFER√äNCIAS GEN√âRICAS: Use \'a visualiza√ß√£o\', \'o gr√°fico\'"')
    console.log('- "NUNCA mencione o nome/ID do gr√°fico no texto"')

    console.log('\n' + '='.repeat(60) + '\n')

    // Teste 3: Verificar exemplos de refer√™ncias corretas
    console.log('‚úÖ Teste 3: Exemplos de refer√™ncias no texto')
    
    const exemploCorreto = `
CORRETO ‚úÖ:
"Os resultados demonstram tend√™ncias significativas, conforme ilustrado na visualiza√ß√£o a seguir.

<div style="margin: 40px 0; text-align: center;">
[CHART:analysis_rnd847]
</div>

A an√°lise gr√°fica evidencia padr√µes claros nos dados coletados."

INCORRETO ‚ùå:
"O gr√°fico analysis_rnd847 mostra..." (menciona ID)
"Conforme o chart_comparison_xyz123..." (menciona nome espec√≠fico)
`

    console.log(exemploCorreto)

    console.log('\nüéØ RESUMO DAS MELHORIAS:')
    console.log('‚úÖ Quantidade flex√≠vel (1-3 gr√°ficos conforme necess√°rio)')
    console.log('‚úÖ IDs aleat√≥rios para evitar padr√µes previs√≠veis')
    console.log('‚úÖ Refer√™ncias gen√©ricas no texto do artigo')
    console.log('‚úÖ N√£o mencionar nomes espec√≠ficos dos gr√°ficos')
    console.log('‚úÖ Priorizar qualidade sobre quantidade obrigat√≥ria')

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message)
  }
}

// Executar teste
testFlexibleCharts()
