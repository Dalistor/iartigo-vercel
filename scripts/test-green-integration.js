// Script para testar a integra√ß√£o completa com Green
const GREEN_API_KEY = process.env.GREEN_API_KEY
const GREEN_API_URL = process.env.GREEN_API_URL || "https://api.green.com.br/v1"
const WEBHOOK_SECRET = process.env.GREEN_WEBHOOK_SECRET

console.log("üß™ Testando Integra√ß√£o Green")
console.log("================================")

// 1. Verificar configura√ß√£o
console.log("\n1Ô∏è‚É£ Verificando Configura√ß√£o:")
console.log("‚úÖ API Key:", GREEN_API_KEY ? `${GREEN_API_KEY.substring(0, 10)}...` : "‚ùå N√ÉO CONFIGURADA")
console.log("‚úÖ API URL:", GREEN_API_URL)
console.log("‚úÖ Webhook Secret:", WEBHOOK_SECRET ? `${WEBHOOK_SECRET.substring(0, 10)}...` : "‚ùå N√ÉO CONFIGURADO")

// 2. Testar conex√£o com API
async function testApiConnection() {
  console.log("\n2Ô∏è‚É£ Testando Conex√£o com API:")

  try {
    const response = await fetch(`${GREEN_API_URL}/health`, {
      headers: {
        Authorization: `Bearer ${GREEN_API_KEY}`,
        "Content-Type": "application/json",
      },
    })

    console.log("üì° Status da API:", response.status)

    if (response.ok) {
      console.log("‚úÖ Conex√£o com Green API: OK")
    } else {
      console.log("‚ùå Erro na conex√£o:", response.statusText)
      const errorText = await response.text()
      console.log("üìÑ Resposta:", errorText)
    }
  } catch (error) {
    console.log("‚ùå Erro de rede:", error.message)
  }
}

// 3. Testar cria√ß√£o de pagamento
async function testPaymentCreation() {
  console.log("\n3Ô∏è‚É£ Testando Cria√ß√£o de Pagamento:")

  const testPayment = {
    amount: 1500, // R$ 15,00
    currency: "BRL",
    description: "iArtigo - Teste de Integra√ß√£o",
    customer: {
      name: "Jo√£o Teste",
      email: "teste@iartigo.com",
      document: "12345678901",
    },
    payment_method: "credit_card",
    metadata: {
      plan_id: "per-article",
      test: true,
    },
  }

  try {
    const response = await fetch(`${GREEN_API_URL}/payments`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${GREEN_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(testPayment),
    })

    console.log("üì° Status cria√ß√£o:", response.status)
    const responseData = await response.text()

    if (response.ok) {
      const payment = JSON.parse(responseData)
      console.log("‚úÖ Pagamento criado:", payment.id)
      console.log("üîó Checkout URL:", payment.checkout_url ? "Dispon√≠vel" : "N√£o dispon√≠vel")
      return payment.id
    } else {
      console.log("‚ùå Erro na cria√ß√£o:", responseData)
    }
  } catch (error) {
    console.log("‚ùå Erro:", error.message)
  }

  return null
}

// 4. Testar webhook
function testWebhookValidation() {
  console.log("\n4Ô∏è‚É£ Testando Valida√ß√£o de Webhook:")

  if (!WEBHOOK_SECRET) {
    console.log("‚ùå Webhook secret n√£o configurado")
    return
  }

  const crypto = require("crypto")
  const testBody = JSON.stringify({
    event_type: "payment.completed",
    data: { id: "test_payment_123", status: "paid" },
  })

  const signature = crypto.createHmac("sha256", WEBHOOK_SECRET).update(testBody).digest("hex")

  console.log("‚úÖ Signature gerada:", signature.substring(0, 16) + "...")
  console.log("‚úÖ Valida√ß√£o de webhook: OK")
}

// Executar todos os testes
async function runAllTests() {
  await testApiConnection()
  const paymentId = await testPaymentCreation()
  testWebhookValidation()

  console.log("\nüéØ Resumo dos Testes:")
  console.log("================================")
  console.log("- Configura√ß√£o: ‚úÖ")
  console.log("- Conex√£o API: Verificar logs acima")
  console.log("- Cria√ß√£o Pagamento: Verificar logs acima")
  console.log("- Webhook: ‚úÖ")

  if (paymentId) {
    console.log(`\nüí° Pagamento de teste criado: ${paymentId}`)
    console.log("Voc√™ pode usar este ID para testar o webhook")
  }
}

runAllTests().catch(console.error)
